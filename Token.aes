contract Token =
  record state = { 
    owner           : address,              
    name            : string,               
    symbol          : string,               
    decimals        : int,                  
    total_supply    : int,                  
    balances        : map(address, int),    
    allowed         : map((address,address), int) }
 
  public stateful entrypoint  init(_name : string, _symbol : string, _decimals : int, _total_supply : int) = 
    let balance : map(address, int) = { [Call.caller] = _total_supply * 10 ^ _decimals }
    { owner                   = Call.caller,
      name                    = _name,
      symbol                  = _symbol,
      decimals                = _decimals,
      total_supply            = _total_supply * 10 ^ _decimals,
      balances                = balance,
      allowed                 = {} }
    

  public entrypoint name() : string = state.name
  public entrypoint symbol() : string = state.symbol
  public entrypoint decimals() : int = state.decimals
  public entrypoint total_supply() : int = state.total_supply
  
  public entrypoint balance_of(who : address) : int = lookup_by_address(who, state.balances, 0)

  private function lookup_by_address(k : address, m, v) =
  	switch(Map.lookup(k, m))
	    None    => v
	    Some(x) => x
  
  public entrypoint allowance(owner: address, spender: address) : int =
    switch(Map.lookup((owner, spender), state.allowed))
	    None    => 0
	    Some(x) => x

  private stateful function transfer'(from: address, to: address, value: int) : bool =
    require(value > 0, "Value is sub zero")
    require(value =< balance_of(from), "Not enough balance")

    put(state{
      balances[from] = sub(balance_of(from), value),
      balances[to] = add(balance_of(to), value)})

    true
  
  public stateful entrypoint transferFrom(from : address, to : address, value : int) : bool =
    require(state.allowed[(from, Call.caller)] >= value, "Value is bigger than allowed")
    
    put(state{allowed[(from, Call.caller)] = sub(state.allowed[(from, Call.caller)], value)})
    transfer'(from, to, value)

    true

  public stateful entrypoint transfer(to: address, value: int) : bool =
    let tokens = value * 10 ^ state.decimals
    transfer'(Call.caller, to, tokens)

  public stateful entrypoint approve(spender: address, value: int) : bool =
    require(value > 0, "Value is sub zero")

    put(state{allowed[(Call.caller,spender)] = value})

    true

  public stateful entrypoint burn(value: int) : bool =
    require(balance_of(Call.caller) >= value, "Burned amount is less than account balance")

    put(state{total_supply = sub(state.total_supply, value),
      balances[Call.caller] = sub(balance_of(Call.caller), value)})

    true

  private function add(a : int, b : int) : int =
    let c : int = a + b
    require(c >= a, "Error")
    c

  private function sub(a : int, b : int) : int =
    require(b =< a, "Error")
    a - b
